# -*- coding: utf-8 -*-
"""
Created on Mon Jun 16 22:26:17 2025

@author: annli
"""

import numpy as np
import math
import matplotlib.pyplot as plt

plt.rcParams["font.family"] = "Times New Roman"
#np.random.seed(56)

# define model parameters
# strength of noise
SIGMA =0.8

# type of trail potential
#TYPE = 'moll'
TYPE = 'normal'

# radius of pheromones for mollified trail potential
RADIUS = 1 
#strength and variance for normal trail potential
TP = 10
TRAIL_V=0.8

# strength and variance of nest and food potential
NEST_V = 8
NP = 10000
FOOD_V = 0.5
FP = 0


# define simulation parameters
NUM_ANTS = 500
# Euler-Maruyama params
TIME = 30
NUM_STEPS = 20*TIME
# endpoints
NEST_X = 5
NEST_Y = 5
FOOD_X = 17.5
FOOD_Y = 17.5
# side length of box
BOX = 20

# type of boundary condition
#BC = 'reflect'
BC = 'restart'

# number of runs
RUNS = 1

# Optional: define obstacles 
OB_RAD = 1
# list of obstacle centres
obs =[[16.28014644400156, 1.6766734630474078], [1.1010996618802036, 11.405028569506142], [0.584883266437375, 3.104546276916414], [2.17603909513956, 6.13988286343131], [7.437271489663979, 20.562932272487938], [11.232208385474925, 7.400161991097524], [1.1082422824848708, 16.33802732659509], [13.667492203962542, 13.770080522624202], [14.178370128761895, 2.972266121930975], [12.722293674829752, 4.992764466988399], [16.241444099872915, 10.446632858365655], [9.492105264023188, 5.223200833685782], [4.481565709664365, 12.615471869894996], [18.910247440386968, 11.07104533562368], [14.77222601928178, 20.625733936442476], [7.746755814745073, 6.6904262343320795], [12.815060038119181, 0.6227744398777693], [12.401000326770284, 10.591419186272441], [5.710243485054401, 18.91456085441227], [4.633864060699505, 20.164119066742934], [1.0306852237654518, 17.85768596306108], [20.692067077293757, 6.338322771599504], [5.306151739376697, 9.154930600109397], [5.215690942369312, 16.116724016179255], [18.16227309420429, 5.957885638321463], [10.766904924250767, 20.091671405475704], [12.589445282563483, 16.633364368287396], [14.693477024352854, 8.473558030240614], [6.078669626683244, 10.905236195815615], [0.9862753380874592, 8.393285090501228], [2.534262036235749, 15.180895279614093], [6.608371559088951, 16.901705652037315], [7.912652220899091, 8.255793072559667], [15.391767739894224, 3.9245688410724786], [18.54296788196972, 3.5600671570784854], [9.714340125163996, 1.4629723961397976], [4.368064935644602, 0.37579096328614137], [8.205524406107072, 19.088614333440308], [3.8816821464743536, 15.563223320602246], [1.0176640605017544, 0.5424236174932463], [9.981264981251318, 15.707223364953812], [2.577128707624572, 12.37995718719967], [6.356819662355834, 0.6310406437690058], [17.76803459193484, 7.883127798088122], [18.156530468557324, 12.679750776167847], [7.401650124523259, 1.9890741470477458], [16.037593639920352, 13.578786430449371], [2.439009774541826, 0.8951228842262333], [2.6009960808768913, 18.826627112852165], [16.83243564910875, 4.956878490192689], [5.481854794149744, 14.060984080593396], [3.179961391746136, 2.155156040428127], [13.630094797314811, 12.079639275040558], [3.4701280333906035, 17.535272951578147], [20.02376635444226, 3.7913972302551064], [11.699798286289916, 13.83555906093792], [9.744765787993943, 14.512596548993061], [20.832599944955874, 16.198559525950376], [11.35685019268727, 11.741897476174763],  [0.18533820379939991, 6.412942484020623], [20.345419168973173, 10.108547074128127], [9.948901075037303, 9.72277445948048],  [8.29357287871786, 0.23460056957640651], [12.983674112015592, 18.167022282045086], [17.686550078814385, 1.3725688319853018], [3.9878911082601256, 10.780566950461028], [16.593075380192563, 6.962682380799636], [10.441612680733854, 18.65742735471025], [2.6132268361184035, 20.961424791252448], [2.38958232563923, 7.842382823873934], [10.015596885143808, 6.705327340524341], [1.6701692369236718, 13.908544686866092], [9.88445941897569, 12.19586422688435], [18.777324900036604, 9.661642120552335], [8.797164827569585, 13.152363622445971], [20.644534227815182, 19.699421703227596], [14.77905385612194, 16.036055253622337], [7.9263968302513945, 14.604031824722107], [19.439903910832026, 15.015970828085235], [20.206206924133447, 11.605336577712446], [8.760933504633428, 17.754468330499975], [10.801942100013846, 2.79457372737], [8.365673965262326, 9.643803255038547], [18.02184918130353, 20.906656210460387], [19.69954704550323, 2.114975380558263], [14.946582806149296, 5.825363442986409], [20.96472172571179, 8.75020605683458], [14.936438033486318, 14.478832807728628]]
# true geodesic using Dijkstra
geox=[5.0, 5.2840786127993, 5.4963000915650975, 5.701384221603931, 5.899707870315536, 6.09164790509964, 6.277581193355965, 6.457884602484245, 6.632934999884205, 6.803109252955574, 6.968784229098083, 7.130336795711456, 7.288143820195422, 7.442582169949709, 7.594028712374042, 7.742860314868158, 7.889453844831776, 8.034186169664633, 8.177434156766445, 8.319574673536948, 8.46098458737587, 8.602040765682936, 8.74312007585788, 8.884599385300422, 9.026855561410295, 9.170265466643611, 9.315124822947062, 9.46144225251175, 9.60916290904048, 9.758231946236057, 9.90859451780128, 10.060195777438958, 10.212980878851893, 10.366894975742886, 10.521883221814738, 10.677890770770261, 10.834862776312255, 10.992744392143527, 11.15148077196687, 11.311017069485096, 11.471298438401005, 11.632270032417406, 11.793877005237098, 11.956064510562886, 12.118777702097567, 12.281961733543959, 12.445561758604855, 12.60952293098306, 12.773790404381378, 12.938305396407737, 13.102922447257056, 13.267411507599022, 13.431539009663815, 13.595071385681623, 13.757775067882628, 13.919416488497008, 14.07976207975496, 14.238578273886652, 14.395631503122278, 14.550688199692019, 14.703514795826054, 14.85387772375457, 15.001543415707749, 15.14627830391578, 15.287848820608836, 15.426021398017108, 15.560562468370783, 15.691238463900035, 15.817815816835052, 15.940060959406019, 16.05774032384312, 16.17062034237653, 16.278467447236444, 16.381048070653037, 16.478128644856497, 16.569475602077006, 16.654855374544752, 16.734034394489903, 16.80677909414266, 16.87286520836017, 16.932278886619564, 16.985214741779597, 17.03187629906771, 17.072467083711345, 17.10719062093795, 17.13625043597496, 17.159850054049826, 17.178193000389992, 17.191482800222897, 17.199922978775987, 17.2037170612767, 17.203068572952482, 17.19818103903078, 17.189257984739033, 17.17650293530469, 17.160119415955183, 17.140310951917964, 17.117281068420475, 17.091233290690163, 17.5]
geoy=[5.0, 4.842568191715546, 4.842603958106727, 4.854222123643802, 4.876840332120708, 4.909876227331377, 4.952747453069737, 5.004871653129722, 5.065666471305264, 5.134549551390296, 5.210938537178748, 5.294251072464554, 5.383904801041644, 5.479317366703951, 5.579906413245405, 5.685089584459942, 5.7942845241414895, 5.906908876083985, 6.022380284081352, 6.140116391927529, 6.259534843416446, 6.380053282342037, 6.501089352498232, 6.622060697678961, 6.74238496167816, 6.861479796283989, 6.97889406420256, 7.094640892201635, 7.208836040846446, 7.321595270702221, 7.433034342334192, 7.543269016307587, 7.652415053187637, 7.760588213539572, 7.867904257928617, 7.974478946920009, 8.080428041078974, 8.185867300970742, 8.290912487160542, 8.395679360213606, 8.500283680695162, 8.60484120917044, 8.70946770620467, 8.81427893236308, 8.919390648210902, 9.024918614313366, 9.130978591235703, 9.237686339543139, 9.345157619800903, 9.453507771293326, 9.562842856206435, 9.673259883094968, 9.78485548393447, 9.897726290700492, 10.011968935368591, 10.12768004991431, 10.244956266313212, 10.36389421654083, 10.484590532572728, 10.607141846384458, 10.73164478995156, 10.858195995249595, 10.986892094254108, 11.117829718940655, 11.251105501284782, 11.386816073262041, 11.525058066847986, 11.665928114018165, 11.809522846748129, 11.95593889701343, 12.10527289678962, 12.257621478052243, 12.413081272776859, 12.571748912939015, 12.733721030514259, 12.899094257478149, 13.06796522580623, 13.24043056747405, 13.416586914457168, 13.596524595738087, 13.780191373915638, 13.967393767266127, 14.157932255492241, 14.351607318296653, 14.548219435382059, 14.747569086451136, 14.949456751206567, 15.15368290935104, 15.36004804058724, 15.568352624617845, 15.778397141145534, 15.989982069873001, 16.202907890502928, 16.416975082738, 16.631984126280894, 16.847735500834297, 17.064029686100888, 17.280667161783363, 17.497448407584397, 17.5]

# uncomment for no obstacles
obs='no obs'

class Ant:
    def __init__(self):
        self.x = NEST_X
        self.y = NEST_Y
        self.currentpath_x = [NEST_X]
        self.currentpath_y = [NEST_Y]
        # locations of pheromone particles
        self.pheromones_x = []
        self.pheromones_y = []
        self.hit = False
        # only for plotting
        self.history_x = []
        self.history_y = []
        self.ptrail_x = []
        self.ptrail_y = []

    def const_potential(self, mean_x, mean_y, var):
        xdist = self.x-mean_x
        ydist = self.y-mean_y
        x_potential = xdist/(2*math.pi*var**4) * \
            math.exp(-(xdist**2 + ydist**2)/(2*var**2))
        y_potential = ydist/(2*math.pi*var**4) * \
            math.exp(-(xdist**2 + ydist**2)/(2*var**2))
        return x_potential, y_potential

    def trail_potential(self, trails_x, trails_y):
        x_potential = 0
        y_potential = 0
        n=1
        for i in range(0, len(trails_x)):
            xdist = self.x-trails_x[i]
            ydist = self.y-trails_y[i]
            if TYPE == 'normal':
                x_potential += xdist/(2*math.pi*TRAIL_V**4) * math.exp(-(xdist**2 + ydist**2)/(2*TRAIL_V**2))            
                y_potential += ydist/(2*math.pi*TRAIL_V**4) * math.exp(-(xdist**2 + ydist**2)/(2*TRAIL_V**2))            
            if TYPE == 'moll':
                if math.sqrt(xdist**2 + ydist**2) <= RADIUS:
                    n+=1
                    x_potential += (2*xdist/RADIUS**2) * (math.exp(-1/(1-(1/RADIUS**2) * (xdist**2 + ydist**2)))) / (1-(1/RADIUS**2) * (xdist**2 + ydist**2))**2 
                    y_potential += (2*ydist/RADIUS**2) * (math.exp(-1/(1-(1/RADIUS**2) * (xdist**2 + ydist**2)))) / (1-(1/RADIUS**2) * (xdist**2 + ydist**2))**2 
        return x_potential/n, y_potential/n

    
    def move(self,  trails_x, trails_y):
        self.hit = False
        self.pheromones_x = []
        self.pheromones_y = []
        dt = TIME/NUM_STEPS
        W1 = math.sqrt(dt)*np.random.normal(0, 1)
        W2 = math.sqrt(dt)*np.random.normal(0, 1)

        nestx, nesty = self.const_potential(NEST_X, NEST_Y, NEST_V)
        foodx, foody = self.const_potential(FOOD_X, FOOD_Y, FOOD_V)
        trailx, traily = self.trail_potential(trails_x,trails_y)

        # plotting only
        self.history_x += [self.x]
        self.history_y += [self.y]
        
        # Euler-Marayama
        self.x = self.currentpath_x[-1] + SIGMA * \
            W1 + (-FP*foodx + NP*nestx - TP*trailx) * dt
        self.y = self.currentpath_y[-1] + SIGMA * \
            W2 + (-FP*foody + NP*nesty - TP*traily) * dt

        # external boundary condition
        if BC == 'restart':
            if self.x < 0 or self.x > BOX or self.y < 0 or self.y > BOX:
                self.x, self.y = NEST_X, NEST_Y
                self.currentpath_x = [NEST_X]
                self.currentpath_y = [NEST_Y]
        elif BC == 'reflect':
            if self.x < 0 or self.x > BOX:
                self.x = self.currentpath_x[-1]
                self.y = 2*self.y - self.currentpath_y[-1]
            if self.y < 0 or self.y > BOX:
                self.y = self.currentpath_y[-1]
                self.x = 2*self.x - self.currentpath_x[-1]
                
        if obs != 'no obs':        
            for i in obs:
                if math.sqrt((self.x-i[0])**2 + (self.y-i[1])**2) <= OB_RAD**2:                
                    self.x = self.currentpath_x[-1]
                    self.y = self.currentpath_y[-1]

        self.currentpath_x += [self.x]
        self.currentpath_y += [self.y]

        if math.sqrt((self.x - FOOD_X) ** 2 + (self.y - FOOD_Y)**2) < 2:
            self.hit = True
            # reset ant
            self.x = NEST_X
            self.y = NEST_Y
                
            # update list of pheromones to include current path
            self.pheromones_x = self.currentpath_x[1:]
            self.pheromones_y = self.currentpath_y[1:]

            #plotting only
            self.ptrail_x += [self.currentpath_x[1:]]
            self.ptrail_y += [self.currentpath_y[1:]]
            
            # reset current path
            self.currentpath_x = [self.x]
            self.currentpath_y = [self.y]

class Simulation:
    def __init__(self):
        self.ants = []
        self.trails_x = []
        self.trails_y = []
        for n in range(NUM_ANTS):
            self.ants += [Ant()]
        self.hits = 0

    def update_trail(self):
        for ant in self.ants:
            self.trails_x += ant.pheromones_x[::15]
            self.trails_y += ant.pheromones_y[::15]

    def move_all_n_times(self, n=NUM_STEPS):
        for i in range(n): 
            self.update_trail()
            l = i*TIME/NUM_STEPS
            if l.is_integer():
                print(l)
            for ant in self.ants:
                ant.move( self.trails_x, self.trails_y)                
                if ant.hit == True:
                    self.hits += 1

    def run_sim(self):
        self.move_all_n_times()
        self.plot_trails()
        print('hits = ', self.hits)

    def plot_trails(self):
        fig, ax = plt.subplots()
        self.plot(fig, ax)
        for ant in self.ants:
            for i in range(len(ant.ptrail_x)):
                plt.plot(ant.ptrail_x[i], ant.ptrail_y[i],alpha = 0.1, color = 'blue')
        plt.show()     
        
    def plot_ants(self):
        fig, ax = plt.subplots()
        for i in range(NUM_STEPS):
            self.plot(fig,ax)
            for ant in self.ants:
                plt.plot(ant.history_x[i], ant.history_y[i], marker = '.')
            plt.show()

    def plot(self,fig, ax):   
        plt.gca().set_aspect('equal', 'box')
        plt.xlim(0,BOX)
        plt.ylim(0,BOX)
        plt.plot(NEST_X, NEST_Y, marker = "X", color = 'red')
        plt.plot(FOOD_X, FOOD_Y, marker = "X", color = 'green')
        ax.tick_params(axis='x', bottom=False, labelbottom=False)
        ax.tick_params(axis='y', left=False, labelleft=False)
        if obs != 'no obs':
            for i in obs:
                circ = plt.Circle((i[0],i[1]), radius = OB_RAD)
                ax.add_artist(circ)
            plt.plot(geox,geoy,color='green')
 
mySim = Simulation()
mySim.run_sim()




